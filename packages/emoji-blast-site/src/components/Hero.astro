---
import Button from "./Button.astro";
import Title from "./Title.astro";
---

<div id="hero">
	<div id="contents">
		<Title as="h1" />

		<p>ðŸŽ† Blasts emoji like fireworks all up in your HTML page. ðŸŽ‡</p>

		<div class="buttons">
			<Button as="a" href="/demo">Demo</Button>
			<Button as="a" href="/api">Full API</Button>
			|
			<Button as="button" id="clicker">Click Me</Button>
		</div>
	</div>

	<div id="blaster"></div>
</div>

<script>
	import { emojiBlast } from "emoji-blast";

	const blaster = document.getElementById("blaster")!;
	const clicker = document.getElementById("clicker")!;

	function getElementPosition(element: HTMLElement) {
		const rect = element.getBoundingClientRect();

		return {
			x: rect.x + rect.width / 2,
			y: rect.y + rect.height / 2,
		};
	}

	clicker.addEventListener("click", (event) => {
		const position =
			event.clientX === 0 && event.clientY === 0
				? getElementPosition(clicker)
				: { x: event.clientX, y: event.clientY };

		emojiBlast({ container: blaster, position });
	});

	const friction = 0.97;
	const frictionDelay =
		Math.max(blaster.clientHeight + blaster.clientWidth) / 100;
	const noise = 0.035;
	let ticks = 0;

	const velocityRange = {
		x: blaster.clientWidth / 17,
		y: blaster.clientHeight / 7,
	};

	function applyFriction(speed: number) {
		const direction = speed > 0 ? 1 : -1;

		const result = +(speed * friction - noise * direction).toPrecision(5);

		return Math.abs(result) < noise ? 0 : result;
	}

	for (const initialVelocities of [
		// Right
		{
			x: { max: velocityRange.x, min: velocityRange.x * 0.5 },
			y: { max: velocityRange.y, min: -velocityRange.y },
		},
		// Left
		{
			x: { max: -velocityRange.x, min: -velocityRange.x * 0.5 },
			y: { max: velocityRange.y, min: -velocityRange.y },
		},
		// Bottom
		{
			x: { max: velocityRange.x, min: -velocityRange.x },
			y: { max: velocityRange.y, min: velocityRange.y * 0.35 },
		},
		// Top
		{
			x: { max: velocityRange.x, min: -velocityRange.x },
			y: { max: -velocityRange.y, min: -velocityRange.y * 0.35 },
		},
	]) {
		const { stop } = emojiBlast({
			container: blaster,
			emojiCount: 35,
			physics: {
				fontSize: {
					max: 42,
					min: 21,
				},
				gravity: 0,
				initialVelocities,
				rotation: 1000,
				preserveOutOfBounds: true,
			},
			position: {
				x: 0,
				y: blaster.clientHeight / 2 + 35,
			},
			tick(actors) {
				ticks += 1;
				if (ticks < frictionDelay) {
					return;
				}

				let hadVelocity = false;

				for (const actor of actors) {
					actor.update({
						velocity: {
							x: applyFriction(actor.velocity.x),
							y: applyFriction(actor.velocity.y),
						},
					});

					hadVelocity ||= actor.velocity.x > 0.2 || actor.velocity.y > 0.2;
				}

				if (!hadVelocity) {
					stop();
				}
			},
		});
	}

	document.getElementById("hero")!.classList.add("loaded");
</script>

<style>
	#hero {
		height: 100%;
		overflow: hidden;
		position: relative;
		text-align: center;
		width: 100%;
	}

	#hero::after {
		content: "";
		opacity: 0;
		top: 0;
		display: block;
		right: 0;
		bottom: 0;
		left: 0;
		position: absolute;
		transition: 2500ms opacity;
	}

	#hero.loaded::after {
		opacity: 1;
		background: radial-gradient(var(--sl-color-bg) 0%, transparent 70%);
	}

	#contents {
		display: flex;
		flex-direction: column;
		font-family: monospace;
		gap: 2rem;
		margin: 4rem 2rem 5rem;
		position: relative;
		z-index: 1;
	}

	.buttons {
		align-items: center;
		display: flex;
		gap: 2rem;
		justify-content: center;
	}

	p {
		font-size: 1.35rem;
	}

	#blaster {
		bottom: 0;
		left: 0;
		overflow: hidden;
		position: absolute;
		right: 0;
		top: 0;
		z-index: -1;
		opacity: 1;
		transition: 2500ms opacity;
	}

	#hero.loaded #blaster {
		opacity: 0.5;
	}
</style>
