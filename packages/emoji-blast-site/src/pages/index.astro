---
import StarlightPage from "@astrojs/starlight/components/StarlightPage.astro";
import Hero from "~/components/Hero.astro";
---

<StarlightPage
	frontmatter={{ tableOfContents: false, title: "emoji-blast" }}
	hasSidebar={false}
>
	<Hero />
</StarlightPage>

<style is:global>
	.page {
		height: 100%;
		justify-content: center;
	}

	.main-frame {
		height: 100%;
		padding-top: 0;
	}
</style>

<!--
Ideally the related scripts would be in Hero.astro and not this file, but see:
- https://github.com/JoshuaKGoldberg/emoji-blast/issues/901
- https://github.com/JoshuaKGoldberg/emoji-blast/pull/902
-->

<script>
	import { emojiBlast } from "emoji-blast";

	function getElementPosition(element: HTMLElement) {
		const rect = element.getBoundingClientRect();

		return {
			x: rect.x + rect.width / 2,
			y: rect.y + rect.height / 2,
		};
	}

	function attachClicker() {
		const clicker = document.getElementById("clicker");
		if (!clicker) {
			return;
		}

		clicker.addEventListener("click", (event) => {
			const position =
				event.clientX === 0 && event.clientY === 0
					? getElementPosition(clicker)
					: { x: event.clientX, y: event.clientY };

			emojiBlast({ position });
		});
	}

	function heroBlast() {
		const blaster = document.getElementById("blaster");
		if (!blaster) {
			return;
		}

		const friction = 0.97;
		const frictionDelay =
			Math.max(blaster.clientHeight + blaster.clientWidth) / 100;
		const noise = 0.035;
		let ticks = 0;

		const velocityRange = {
			x: blaster.clientWidth / 17,
			y: blaster.clientHeight / 7,
		};

		function applyFriction(speed: number) {
			const direction = speed > 0 ? 1 : -1;

			const result = +(speed * friction - noise * direction).toPrecision(5);

			return Math.abs(result) < noise ? 0 : result;
		}

		for (const { emojiCount, x, y } of [
			// Right
			{
				emojiCount: 35,
				x: { max: velocityRange.x, min: velocityRange.x * 0.5 },
				y: { max: velocityRange.y, min: -velocityRange.y },
			},
			// Left
			{
				emojiCount: 35,
				x: { max: -velocityRange.x, min: -velocityRange.x * 0.5 },
				y: { max: velocityRange.y, min: -velocityRange.y },
			},
			// Bottom
			{
				emojiCount: 50,
				x: { max: velocityRange.x, min: -velocityRange.x },
				y: { max: velocityRange.y, min: velocityRange.y * 0.35 },
			},
			// Top
			{
				emojiCount: 50,
				x: { max: velocityRange.x, min: -velocityRange.x },
				y: { max: -velocityRange.y, min: -velocityRange.y * 0.49 },
			},
		]) {
			const { stop } = emojiBlast({
				container: blaster,
				emojiCount,
				physics: {
					fontSize: {
						max: 42,
						min: 21,
					},
					gravity: 0,
					initialVelocities: { x, y },
					rotation: 1000,
					preserveOutOfBounds: true,
				},
				position: {
					x: 0,
					y: blaster.clientHeight / 2 + 35,
				},
				tick(actors) {
					ticks += 1;
					if (ticks < frictionDelay) {
						return;
					}

					let hadVelocity = false;

					for (const actor of actors) {
						actor.update({
							velocity: {
								x: applyFriction(actor.velocity.x),
								y: applyFriction(actor.velocity.y),
							},
						});

						hadVelocity ||= actor.velocity.x > 0.2 || actor.velocity.y > 0.2;
					}

					if (!hadVelocity) {
						stop();
					}
				},
			});
		}
	}

	if (!window.matchMedia("(prefers-reduced-motion: reduce)").matches) {
		heroBlast();
	}

	attachClicker();

	document.getElementById("hero")?.classList.add("loaded");
</script>
